package usecase

import (
	"context"
	"encoding/json"
	"time"

	"github.com/TranThang-2804/infrastructure-engine/internal/domain"
	"github.com/TranThang-2804/infrastructure-engine/internal/shared/constant"
	"github.com/TranThang-2804/infrastructure-engine/internal/shared/log"
	"github.com/TranThang-2804/infrastructure-engine/internal/utils"
)

type compositeResourceUsecase struct {
	compositeResourceRepository     domain.CompositeResourceRepository
	compositeResourceEventPublisher domain.CompositeResourceEventPublisher
	bluePrintUsecase                domain.BluePrintUsecase
	contextTimeout                  time.Duration
}

func NewCompositeResourceUsecase(compositeResourceRepository domain.CompositeResourceRepository, compositeResourceEventPublisher domain.CompositeResourceEventPublisher, bluePrintUsecase domain.BluePrintUsecase) domain.CompositeResourceUsecase {
	return &compositeResourceUsecase{
		compositeResourceRepository:     compositeResourceRepository,
		compositeResourceEventPublisher: compositeResourceEventPublisher,
		bluePrintUsecase:                bluePrintUsecase,
		contextTimeout:                  utils.GetContextTimeout(),
	}
}

func (cu *compositeResourceUsecase) GetAll(c context.Context) ([]domain.CompositeResource, error) {
	ctx, cancel := context.WithTimeout(c, cu.contextTimeout)
	defer cancel()
	return cu.compositeResourceRepository.GetAll(ctx)
}

func (cu *compositeResourceUsecase) Create(c context.Context, createCompositeResourceRequest domain.CreateCompositeResourceRequest) (domain.CompositeResource, error) {
	ctx, cancel := context.WithTimeout(c, cu.contextTimeout)
	defer cancel()

	// Validate BluePrintId
	bluePrint, err := cu.bluePrintUsecase.GetById(c, createCompositeResourceRequest.BluePrintId)
	if err != nil {
		log.Logger.Error("Error getting blueprint by id", "error", err.Error())
		return domain.CompositeResource{}, err
	}

	var selectedBluePrintVersion domain.BluePrintVersion

	for _, version := range bluePrint.Versions {
		if version.Name == createCompositeResourceRequest.BluePrintVersion {
			selectedBluePrintVersion = version
		}
	}

	// Validate Spec With JsonSchema
	err = utils.ValidateJsonSchema(createCompositeResourceRequest.Spec, selectedBluePrintVersion.JsonSchema)
	if err != nil {
		log.Logger.Error("Error validating json schema", "error", err.Error())
		return domain.CompositeResource{}, err
	}

	// Generate uuid
	log.Logger.Debug("Generating uuidv7")
	uuid, err := utils.GenerateUUIDv7()
	if err != nil {
		log.Logger.Error("Error getting all composite resources", "error", err.Error())
		return domain.CompositeResource{}, err
	}

	// Get current time
	currentTime := time.Now()
	currentDate := currentTime.Format("2006-01-02")

	// Getting user created
	createdBy := "anonymous"

	compositeResource := domain.CompositeResource{
		Name:             createCompositeResourceRequest.Name,
		Description:      createCompositeResourceRequest.Description,
		BluePrintId:      createCompositeResourceRequest.BluePrintId,
		BluePrintVersion: createCompositeResourceRequest.BluePrintVersion,
		Id:               uuid,
		CreatedAt:        currentDate,
		CreatedBy:        createdBy,
		LastModifiedAt:   currentDate,
		LastModifiedBy:   createdBy,
		Spec:             createCompositeResourceRequest.Spec,
		Status:           constant.Pending,
		Resources:        nil,
		Metadata:         createCompositeResourceRequest.MetaData,
	}

	// Generate resource template
	for _, template := range selectedBluePrintVersion.CompositeTemplate {
		selectedBluePrint, err := cu.bluePrintUsecase.GetByIdAndVersion(c, template.TemplateId, template.Version)
		if err != nil {
			log.Logger.Error("Error getting blueprint by id", "error", err.Error())
			return domain.CompositeResource{}, err
		}

		resourceValue, err := utils.GenerateGoTemplateOutput(createCompositeResourceRequest.Spec, template.ValueTemplate)
		if err != nil {
			log.Logger.Error("Error generating template", "error", err.Error())
			return domain.CompositeResource{}, err
		}

		resourceConfig := domain.Resource{
			Name:               selectedBluePrint.Name,
			Id:                 uuid,
			Status:             constant.Pending,
			Description:        "Generated by Infrastructure Engine using " + template.TemplateId,
			IacTemplateId:      template.TemplateId,
			IacTemplateVersion: template.Version,
			ResourceValue:      resourceValue,
			RunIds:             []domain.IacPipeline{},
		}

		compositeResource.Resources = append(compositeResource.Resources, resourceConfig)
	}

	// Store the composite resource
	compositeResourceCreated, err := cu.compositeResourceRepository.Create(ctx, compositeResource)

	if err != nil {
		log.Logger.Error("Error creating composite resource", "error", err.Error())
		return domain.CompositeResource{}, err
	}
	log.Logger.Debug("Created composite resource", "compositeResource", compositeResourceCreated)

	// Push message to message queue to Provision
	err = cu.compositeResourceEventPublisher.PublishToPendingSubject(c, compositeResourceCreated)
	if err != nil {
		log.Logger.Error("Error pushing message to queue", "error", err.Error())
		return domain.CompositeResource{}, err
	}

	return compositeResource, nil
}

func (cu *compositeResourceUsecase) Update(c context.Context, deleteCompositeResourceRequest domain.UpdateCompositeResourceRequest) (domain.CompositeResource, error) {
	return domain.CompositeResource{}, nil
}

func (cu *compositeResourceUsecase) Delete(c context.Context, deleteCompositeResourceRequest domain.DeleteCompositeResourceRequest) (domain.CompositeResource, error) {
	return domain.CompositeResource{}, nil
}

func (cu *compositeResourceUsecase) HandlePending(message []byte) error {
	var compositeResource domain.CompositeResource

	// Unmarshal the message into the composite resource struct
	err := json.Unmarshal(message, &compositeResource)
	if err != nil {
		log.Logger.Error("Error unmarshalling message", "error", err.Error())
		return err
	}

	// Validate the composite resource
	err = utils.ValidateStruct(compositeResource)
	if err != nil {
		log.Logger.Error("Error validating composite resource", "error", err.Error())
		return err
	}

  // Logic for handling the pending message

	log.Logger.Debug("Handling pending message", "message", compositeResource)
	return nil
}

func (cu *compositeResourceUsecase) HandleProvisioning(message []byte) error {
	return nil
}

func (cu *compositeResourceUsecase) HandleDeleting(message []byte) error {
	return nil
}
